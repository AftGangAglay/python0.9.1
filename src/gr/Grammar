# Grammar for Python, version 4

# Changes compared to version 3:
#      Removed 'dir' statement.
#      Function call argument is a PY_GRAMMAR_TEST_LIST instead of PY_GRAMMAR_EXPRESSION_LIST.

# Changes compared to version 2:
#      The syntax of Boolean operations is changed to use more
#      conventional priorities: or < and < not.

# Changes compared to version 1:
#      modules and scripts are unified;
#      'quit' is gone (use ^D);
#      empty_stmt is gone, replaced by explicit PY_NEWLINE where appropriate;
#      'import' and 'def' aren't special any more;
#      added 'from' PY_NAME option on import clause, and '*' to import all;
#      added class definition.

# Start symbols for the grammar:
#      PY_GRAMMAR_FILE_INPUT is a module or sequence of commands read from an input file;

PY_GRAMMAR_FILE_INPUT: (PY_NEWLINE | PY_GRAMMAR_STATEMENT)* PY_ENDMARKER

PY_GRAMMAR_FUNCTION_DEFINITION: 'def' PY_NAME PY_GRAMMAR_PARAMETERS ':' PY_GRAMMAR_SUITE
PY_GRAMMAR_PARAMETERS: '(' [PY_GRAMMAR_PARAMETER_LIST] ')'
PY_GRAMMAR_PARAMETER_LIST: PY_GRAMMAR_PARAMETER_DEFINITION (',' PY_GRAMMAR_PARAMETER_DEFINITION)*
PY_GRAMMAR_PARAMETER_DEFINITION: PY_NAME | '(' PY_GRAMMAR_PARAMETER_LIST ')'

PY_GRAMMAR_STATEMENT: PY_GRAMMAR_SIMPLE_STATEMENT | PY_GRAMMAR_COMPOUND_STATEMENT
PY_GRAMMAR_SIMPLE_STATEMENT: PY_GRAMMAR_EXPRESSION_STATEMENT | PY_GRAMMAR_FLOW_STATEMENT | PY_GRAMMAR_IMPORT_STATEMENT
PY_GRAMMAR_EXPRESSION_STATEMENT: (PY_GRAMMAR_EXPRESSION_LIST '=')* PY_GRAMMAR_EXPRESSION_LIST PY_NEWLINE
# For assignments, additional restrictions enforced by the interpreter
PY_GRAMMAR_FLOW_STATEMENT: PY_GRAMMAR_BREAK_STATEMENT | PY_GRAMMAR_RETURN_STATEMENT
PY_GRAMMAR_BREAK_STATEMENT: 'break' PY_NEWLINE
PY_GRAMMAR_RETURN_STATEMENT: 'return' [PY_GRAMMAR_TEST_LIST] PY_NEWLINE
PY_GRAMMAR_IMPORT_STATEMENT: 'import' PY_NAME (',' PY_NAME)* PY_NEWLINE | 'from' PY_NAME 'import' ('*' | PY_NAME (',' PY_NAME)*) PY_NEWLINE
PY_GRAMMAR_COMPOUND_STATEMENT: PY_GRAMMAR_IF_STATEMENT | PY_GRAMMAR_WHILE_STATEMENT | PY_GRAMMAR_FOR_STATEMENT | PY_GRAMMAR_TRY_STATEMENT | PY_GRAMMAR_FUNCTION_DEFINITION | PY_GRAMMAR_CLASS_DEFINITION
PY_GRAMMAR_IF_STATEMENT: 'if' PY_GRAMMAR_TEST ':' PY_GRAMMAR_SUITE ('elif' PY_GRAMMAR_TEST ':' PY_GRAMMAR_SUITE)* ['else' ':' PY_GRAMMAR_SUITE]
PY_GRAMMAR_WHILE_STATEMENT: 'while' PY_GRAMMAR_TEST ':' PY_GRAMMAR_SUITE ['else' ':' PY_GRAMMAR_SUITE]
PY_GRAMMAR_FOR_STATEMENT: 'for' PY_GRAMMAR_EXPRESSION_LIST 'in' PY_GRAMMAR_EXPRESSION_LIST ':' PY_GRAMMAR_SUITE ['else' ':' PY_GRAMMAR_SUITE]
PY_GRAMMAR_TRY_STATEMENT: 'try' ':' PY_GRAMMAR_SUITE (PY_GRAMMAR_EXCEPT_CLAUSE ':' PY_GRAMMAR_SUITE)*
PY_GRAMMAR_EXCEPT_CLAUSE: 'except' [PY_GRAMMAR_EXPRESSION [',' PY_GRAMMAR_EXPRESSION]]
PY_GRAMMAR_SUITE: PY_GRAMMAR_SIMPLE_STATEMENT | PY_NEWLINE PY_INDENT PY_NEWLINE* (PY_GRAMMAR_STATEMENT PY_NEWLINE*)+ PY_DEDENT

PY_GRAMMAR_TEST: PY_GRAMMAR_TEST_AND ('or' PY_GRAMMAR_TEST_AND)*
PY_GRAMMAR_TEST_AND: PY_GRAMMAR_TEST_NOT ('and' PY_GRAMMAR_TEST_NOT)*
PY_GRAMMAR_TEST_NOT: 'not' PY_GRAMMAR_TEST_NOT | PY_GRAMMAR_TEST_COMPARE
PY_GRAMMAR_TEST_COMPARE: PY_GRAMMAR_EXPRESSION (PY_GRAMMAR_COMPARE_OP PY_GRAMMAR_EXPRESSION)*
PY_GRAMMAR_COMPARE_OP: '<'|'>'|'='|'>' '='|'<' '='|'<' '>'|'in'|'not' 'in'|'is'|'is' 'not'
PY_GRAMMAR_EXPRESSION: PY_GRAMMAR_TERM (('+'|'-') PY_GRAMMAR_TERM)*
PY_GRAMMAR_TERM: PY_GRAMMAR_FACTOR (('*'|'/'|'%') PY_GRAMMAR_FACTOR)*
PY_GRAMMAR_FACTOR: ('+'|'-') PY_GRAMMAR_FACTOR | PY_GRAMMAR_ATOM PY_GRAMMAR_TRAILER*
PY_GRAMMAR_ATOM: '(' [PY_GRAMMAR_TEST_LIST] ')' | '[' [PY_GRAMMAR_TEST_LIST] ']' | '{' '}' | '`' PY_GRAMMAR_TEST_LIST '`' | PY_NAME | PY_NUMBER | PY_STRING
PY_GRAMMAR_TRAILER: '(' [PY_GRAMMAR_TEST_LIST] ')' | '[' PY_GRAMMAR_SUBSCRIPT ']' | '.' PY_NAME
PY_GRAMMAR_SUBSCRIPT: PY_GRAMMAR_EXPRESSION | [PY_GRAMMAR_EXPRESSION] ':' [PY_GRAMMAR_EXPRESSION]
PY_GRAMMAR_EXPRESSION_LIST: PY_GRAMMAR_EXPRESSION (',' PY_GRAMMAR_EXPRESSION)* [',']
PY_GRAMMAR_TEST_LIST: PY_GRAMMAR_TEST (',' PY_GRAMMAR_TEST)* [',']

PY_GRAMMAR_CLASS_DEFINITION: 'class' PY_NAME ':' PY_GRAMMAR_SUITE
PY_GRAMMAR_ARGUMENTS: '(' [PY_GRAMMAR_TEST_LIST] ')'
